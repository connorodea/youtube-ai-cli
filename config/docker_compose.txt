version: '3.8'

services:
  youtube-ai-cli:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: youtube-ai-cli
    environment:
      # API Keys (set these in .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      
      # Application settings
      - OUTPUT_DIR=/app/output
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # Performance settings
      - WORKERS=${WORKERS:-3}
      - MAX_CONCURRENT=${MAX_CONCURRENT:-2}
    volumes:
      # Persistent data
      - youtube_ai_output:/app/output
      - youtube_ai_config:/home/app/.youtube-ai
      - youtube_ai_cache:/app/cache
      - youtube_ai_logs:/app/logs
      
      # Mount local config for development (optional)
      # - ./config:/app/config:ro
      
      # Mount credentials (optional)
      # - ./credentials:/app/credentials:ro
    
    # Uncomment for interactive use
    # stdin_open: true
    # tty: true
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    # Restart policy
    restart: unless-stopped
    
    # Health check
    healthcheck:
      test: ["CMD", "python", "-c", "import youtube_ai; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Redis for caching (if you want to add caching later)
  redis:
    image: redis:7-alpine
    container_name: youtube-ai-redis
    restart: unless-stopped
    volumes:
      - youtube_ai_redis:/data
    command: redis-server --appendonly yes
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Optional: PostgreSQL for analytics (alternative to SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: youtube-ai-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: youtube_ai
      POSTGRES_USER: youtube_ai
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-youtube_ai_password}
    volumes:
      - youtube_ai_postgres:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    # Uncomment to expose PostgreSQL port
    # ports:
    #   - "5432:5432"

  # Optional: Monitoring with Prometheus (for production)
  prometheus:
    image: prom/prometheus:latest
    container_name: youtube-ai-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - youtube_ai_prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    profiles:
      - monitoring

  # Optional: Grafana for dashboards (for production)
  grafana:
    image: grafana/grafana:latest
    container_name: youtube-ai-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - youtube_ai_grafana:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    profiles:
      - monitoring
    depends_on:
      - prometheus

volumes:
  youtube_ai_output:
    driver: local
  youtube_ai_config:
    driver: local
  youtube_ai_cache:
    driver: local
  youtube_ai_logs:
    driver: local
  youtube_ai_redis:
    driver: local
  youtube_ai_postgres:
    driver: local
  youtube_ai_prometheus:
    driver: local
  youtube_ai_grafana:
    driver: local

# Network configuration
networks:
  default:
    name: youtube-ai-network